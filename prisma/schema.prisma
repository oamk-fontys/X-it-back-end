// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  COMPANY
}

enum BookingState {
  SCHEDULED
  IN_PROGRESS
  DONE
  CANCELLED
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  username    String    @unique
  firstName   String
  lastName    String
  phoneNumber String
  dateOfBirth DateTime
  role        Role      @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  pets        Pet[]
  Company     Company?  @relation(fields: [companyId], references: [id])
  companyId   String?
  accessCode  String?   @unique
  Booking     Booking[]
}

// THIS IS NOT PART OF THE APPLICATION JUST AN EXAMPLE TO SHOW MODULES
model Pet {
  id          String  @id @default(uuid())
  name        String
  age         Int
  breed       String
  species     String
  gender      String
  color       String
  size        String
  weight      Int
  image       String
  description String
  userId      String?
  user        User?   @relation(fields: [userId], references: [id])
}

model Company {
  id          String   @id @default(uuid())
  name        String
  address     String
  city        String
  vat         String
  postalCode  String
  description String
  ownerId     String?
  verified    Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Room        Room[]
  User        User[]
}

model Room {
  id          String    @id @default(uuid())
  name        String
  description String
  companyId   String
  company     Company?  @relation(fields: [companyId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Booking     Booking[]
}

model Booking {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  weekday   String
}
