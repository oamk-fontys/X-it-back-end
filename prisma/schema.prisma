// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  COMPANY
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  username    String   @unique
  firstName   String
  lastName    String
  phoneNumber String
  dateOfBirth DateTime
  role        Role     @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  pets        Pet[]
  Company     Company? @relation(fields: [companyId], references: [id])
  companyId   String?
  accessCode  String?  @unique
}

// THIS IS NOT PART OF THE APPLICATION JUST AN EXAMPLE TO SHOW MODULES
model Pet {
  id          String  @id @default(uuid())
  name        String
  age         Int
  breed       String
  species     String
  gender      String
  color       String
  size        String
  weight      Int
  image       String
  description String
  userId      String?
  user        User?   @relation(fields: [userId], references: [id])
}

model Company {
  id          String   @id @default(uuid())
  name        String
  address     String
  city        String
  vat         String
  postalCode  String
  description String
  ownerId     String?
  verified    Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Room        Room[]
  User        User[]
}

model Room {
  id          String   @id @default(uuid())
  name        String
  description String
  companyId   String
  company     Company? @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}



model Game {
  id         String     @id @default(uuid())  // Unique identifier for the game
  teamName   String     // The team name playing the game
  roomId     String     // The room where the game will take place
  startTime  DateTime?  // Optional: Set when the game starts
  endTime    DateTime?  // Optional: Set when the game ends
  createdAt  DateTime   @default(now())  // Auto-set when the game is created
  updatedAt  DateTime   @updatedAt       // Auto-set when the game is updated

  room       Room       @relation(fields: [roomId], references: [id]) // Relationship to Room
  players    Player[]   // Players in the game (users or guests)
  booking    Booking?   // Optional relation to a Booking model (if game is booked)
  statistics Statistic? // Optional game statistics (scores, completion time, etc.)
}


model Player {
  id       String  @id @default(uuid())  // Unique identifier for each player
  userId   String?                         // Nullable: Player may or may not be a registered user
  gameId   String                           // Every player belongs to a game
  isGuest  Boolean @default(false)          // True if the player is not a registered user
  isAdult  Boolean                          // Indicates if the player is an adult
  
  user     User?   @relation(fields: [userId], references: [id]) // Connects to User model
  game     Game    @relation(fields: [gameId], references: [id]) // Connects to Game model
}

